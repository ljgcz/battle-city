------------------------------------------------------------------------
This is the project README file. Here, you should describe your project.
Tell the reader (someone who does not know anything about this project)
all he/she needs to know. The comments should usually include at least:
------------------------------------------------------------------------

Project Title:
Battle City

Project Author:
Jinghua Zhao

Date: 
June 14, 2023

Game Premise:
Battle City is a multi-directional shooter video game for the Family 
Computer produced and published in 1985 by Namco. The player controls a 
tank and shoot bullets to destroy enemy tanks around the playfield. 
The enemy tanks enter from the top of the screen and attempt to destroy
the player's base. It is especially popular in Asia, where it first
released. If you ask any Chinese person born in the 70s-90s, he will
definitely remember playing this fun little game.

How to Play:
    - Enter key: starts the game
    - Up arrow key: move up
    - Down arrow key: move down
    - Left arrow key: move to the left
    - Right arrow key: move to the right
    - Space bar: shoot bullet
Your goal is to protect the eagle at all cost. Once reaches level 35, 
you win! You can destroy bricks to create pathways or hide in the 
woods (there are no special effects to this ``hiding''). Steel walls 
and water cannot be destroyed nor cross. Bullet can go through woods
and water. You can kill enemies by shooting a bullet towards them, and
enemies can also kill you. You have three lives: you lose once you have
no life left. Note that there is a bullet count, you cannot shoot if
there are no bullets left. To gain more bullets, you need to ``eat'' 
those star bricks randomly generating at the bottom of the game field. 
Level increases by one per 200 iterations. As you reach a higher level, 
enemies will spawn faster.

Titles and URLs:
No additional tutorials were used. All I used were my critical thinking
and problem solving skills.

How I met each Tier:
Tier 2:
    - Shooting in one or more directions. (Player shoots in all four
    directions)
    - Keep track of items hit with “bullet” type objects and display 
    on the screen. (If an enemy shoots a bullet which hit the player,
    the player will lose one life. This will displayed on the screen
    as one less bricks shown under ``Life Left'')
    - Power ups. (The star power up for the player to gain bullets)
    
    - [Gravity OR Jumping. (None)]
    - [Scrolling Backgrounds. (None) There is a changing background
    when the user presses enter to start the game.]

Tier 3:
    - Constructors that take parameters. (For example: the constructor 
    for class ``Appear'' takes a parameter which determines whether if
    a player or an enemy will be generated after the blinking 
    animation; the constructor for class ``Bullet'' class takes three
    parameters to determine the direction, speed, and type of the 
    bullet)
    - Using and making accessors and mutators (Accessors were used to
    determine whether if a bullet was generated by the player or an 
    enemy)
    - Animations using arrays. (Blinking animation when a tank is being
    generated, or the flowing water)

    - [Changing the transparency of an image. (None)]

Since Ms. Nizio mentioned that the above are just what a game MIGHT 
include, I did not specifically followed every single requirement.

Instead, below are some way more challenging tasks that I accomplished:
    - Fully random, automatic motion of enemy tanks.
    - Wall collision checking with specific mechanism ensuring that
    the tank will never be ``half in a wall'' since all images have 
    a size.
    - When a tank spawns, a blinking animation will appear first. Once
    this animation is finished, the tank will appear. This was 
    achieved without the usage of delay functions.
    - No ``isAtEdge()'' were used since the game field is far inside 
    the edge of the world class. All edge checking were done using
    my special algorithms.

Leo's Words:
Note that no arrays were used in making the animations. I used a
simpler method by adding a decimal number like 0.03 every iteration,
then used modulus to set the image. I fully understands the function,
application, and usage of arrays, it just that there is a better way
to do it. I fully understand that it is slight less efficient to set
the image every time, but this game does not require such high level 
of efficiency.

Not all classes have a constructor since it would make the game less 
efficient by giving a constructor to a plain image for example in class 
``Gamefield''.

This game is not very easy to win, so be prepared to lose ;)

Fun Facts:
    - The layout of this game is an exact copy of the last level in the 
    actual game.
    - There are only 35 levels in the actual game, and that's why
    you win at level 35.
